version: "3.8"

services:
  redis:
    extends:
      file: docker-compose.base.yml
      service: redis
    volumes:
      - ./docker/redis/data:/data
    networks:
      - localnetwork

  postgres:
    extends:
      file: docker-compose.base.yml
      service: postgres
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data

  localstack:
    extends:
      file: docker-compose.base.yml
      service: localstack
    volumes:
      - "./docker/localstack/data:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  aws-cli:
    extends:
      file: docker-compose.base.yml
      service: aws-cli
    volumes:
      - ./docker/localstack/cli:/aws

  https-portal:
    image: steveltn/https-portal:1
    ports:
      - "80:80"
      - "443:443"
    restart: always
    environment:
      DOMAINS: "localhost -> http://quadratic-client:3000"
      STAGE: "local" # Use 'production' to use a LetsEncrypt signed SSL cert
      FORCE_RENEW: "false"
    networks:
      - localnetwork
    depends_on:
      - quadratic-client

  quadratic-client:
    build:
      context: .
      dockerfile: quadratic-client/Dockerfile
    env_file:
      - quadratic-client/.env.local
      - quadratic-client/.env.docker
    # override env vars here
    environment:
      VITE_QUADRATIC_API_URL: https://0.0.0.0:8000
      VITE_QUADRATIC_MULTIPLAYER_URL: wss://0.0.0.0:3001/ws
      VITE_QUADRATIC_CONNECTION_URL: https://0.0.0.0:3003
    restart: "always"
    ports:
      - "3000:3000"
    command: "npm start --workspace=quadratic-client -- --host"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - client
      - frontend
      - all
    networks:
      - localnetwork

  quadratic-api:
    build:
      context: .
      dockerfile: quadratic-api/Dockerfile
    env_file:
      - quadratic-api/.env
      - quadratic-api/.env.docker
    restart: "always"
    ports:
      - "8000:8000"
    command: "npm start --workspace=quadratic-api"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - api
      - frontend
      - all

  quadratic-multiplayer:
    build:
      context: .
      dockerfile: quadratic-multiplayer/Dockerfile
      args:
        - binary=quadratic-multiplayer
    env_file:
      - quadratic-multiplayer/.env.docker
    # override env vars here
    environment:
      # QUADRATIC_API_URI: http://host.docker.internal:8000
      RUST_LOG: info
    restart: "always"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - backend
      - quadratic-multiplayer
      - all
    networks:
      - localnetwork

  quadratic-files:
    build:
      context: .
      dockerfile: quadratic-files/Dockerfile
      args:
        - binary=quadratic-files
    env_file:
      - quadratic-files/.env.docker
    # override env vars here
    environment:
      QUADRATIC_API_URI: http://host.docker.internal:8000
      RUST_LOG: info
    restart: "always"
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - backend
      - quadratic-files
      - all

  # quadratic-connection:
  #   build:
  #     context: .
  #     dockerfile: quadratic-connection/Dockerfile
  #     args:
  #       - binary=quadratic-connection
  #   env_file:
  #     - quadratic-connection/.env.docker
  #   # override env vars here
  #   environment:
  #     QUADRATIC_API_URI: http://host.docker.internal:8000
  #     RUST_LOG: info
  #   restart: "always"
  #   ports:
  #     - "3003:3003"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     quadratic-api:
  #       condition: service_started
  #   profiles:
  #     - backend
  #     - quadratic-connection
  #     - all

volumes:
  docker:
    name: docker

networks:
  localnetwork:
